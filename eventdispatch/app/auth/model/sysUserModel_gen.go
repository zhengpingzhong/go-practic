// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`create_time`", "`update_time`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheEventdispatchSysUserUserIdPrefix = "cache:eventdispatch:sysUser:userId:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		UserId       int64          `db:"user_id"`
		Username     string         `db:"username"`       // 用户名
		Password     sql.NullString `db:"password"`       // 密码
		Salt         sql.NullString `db:"salt"`           // 盐
		Email        sql.NullString `db:"email"`          // 邮箱
		Mobile       sql.NullString `db:"mobile"`         // 手机号
		ExpireDate   sql.NullTime   `db:"expire_date"`    // 过期时间
		Status       sql.NullInt64  `db:"status"`         // 状态  0：禁用   1：正常
		CreateUserId sql.NullInt64  `db:"create_user_id"` // 创建者ID
		CreateTime   sql.NullTime   `db:"create_time"`    // 创建时间
		StaffId      sql.NullInt64  `db:"staff_id"`       // 员工id
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	eventdispatchSysUserUserIdKey := fmt.Sprintf("%s%v", cacheEventdispatchSysUserUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Salt, data.Email, data.Mobile, data.ExpireDate, data.Status, data.CreateUserId, data.StaffId)
	}, eventdispatchSysUserUserIdKey)
	return ret, err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, userId int64) (*SysUser, error) {
	eventdispatchSysUserUserIdKey := fmt.Sprintf("%s%v", cacheEventdispatchSysUserUserIdPrefix, userId)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, eventdispatchSysUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Update(ctx context.Context, data *SysUser) error {
	eventdispatchSysUserUserIdKey := fmt.Sprintf("%s%v", cacheEventdispatchSysUserUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Salt, data.Email, data.Mobile, data.ExpireDate, data.Status, data.CreateUserId, data.StaffId, data.UserId)
	}, eventdispatchSysUserUserIdKey)
	return err
}

func (m *defaultSysUserModel) Delete(ctx context.Context, userId int64) error {
	eventdispatchSysUserUserIdKey := fmt.Sprintf("%s%v", cacheEventdispatchSysUserUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, eventdispatchSysUserUserIdKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheEventdispatchSysUserUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
